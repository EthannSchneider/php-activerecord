{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Active Record is a software design pattern that abstracts database interactions, enabling developers to treat database records as objects within the host programming language (in our case, PHP). Each object instance represents a row in a database table, and its attributes correspond to the table's columns. This pattern allows for the creation, retrieval, updating, and deletion of records without the need for explicit SQL queries, streamlining database operations and enhancing code maintainability.</p> <pre><code>$book = Book::find(1); // find a book by its primary key\n$title = $book-&gt;title; // get the title\n$book-&gt;title = strtoupper($title); // write the title\n$book-&gt;save(); // save your changes\n\n$book-&gt;delete();\n</code></pre>"},{"location":"associations/","title":"Associations","text":"<p>TODO: fill me in</p>"},{"location":"crud/","title":"Basic CRUD","text":""},{"location":"crud/#retrieve","title":"Retrieve","text":"<p>These are your basic methods to find and retrieve records from your database. See the Finders section for more details.</p> <pre><code>$post = Post::find(1);\necho $post-&gt;title; // 'My first blog post!!'\necho $post-&gt;author_id; // 5\n\n# also the same since it is the first record in the db\n$post = Post::first();\n\n# finding using dynamic finders\n$post = Post::find_by_name('The Decider');\n$post = Post::find_by_name_and_id('The Bridge Builder',100);\n$post = Post::find_by_name_or_id('The Bridge Builder',100);\n\n# finding using a conditions array\n$posts = Post::find('all',['conditions' =&gt; ['name=? or id &gt; ?','The Bridge Builder',100]]);\n</code></pre>"},{"location":"crud/#create","title":"Create","text":"<p>Here we create a new post by instantiating a new object and then invoking the <code>save()</code> method.</p> <pre><code>$post = new Post();\n$post-&gt;title = 'My first blog post!!';\n$post-&gt;author_id = 5;\n$post-&gt;save();\n// INSERT INTO `posts` (title,author_id) VALUES('My first blog post!!', 5)\n</code></pre>"},{"location":"crud/#update","title":"Update","text":"<p>To update you would just need to find a record first and then change one of its attributes. It keeps an array of attributes that are \"dirty\" (that have been modified) and so our sql will only update the fields modified.</p> <pre><code>$post = Post::find(1);\necho $post-&gt;title; // 'My first blog post!!'\n$post-&gt;title = 'Some real title';\n$post-&gt;save();\n// UPDATE `posts` SET title='Some real title' WHERE id=1\n\n$post-&gt;title = 'New real title';\n$post-&gt;author_id = 1;\n$post-&gt;save();\n// UPDATE `posts` SET title='New real title', author_id=1 WHERE id=1\n</code></pre>"},{"location":"crud/#delete","title":"Delete","text":"<p>Deleting a record will not destroy the object. This means that it will call sql to delete the record in your database but you can still use the object if you need to.</p> <pre><code>$post = Post::find(1);\n$post-&gt;delete();\n// DELETE FROM `posts` WHERE id=1\necho $post-&gt;title; # 'New real title'\n</code></pre>"},{"location":"introduction/","title":"Introduction","text":"<p>php-activerecord is an implementation of Active Record, a design pattern with the goal of seamlessly mapping database table rows to objects. Aside from some initial one-time setup, you don't have to write any getters or setters or teach your object class about the columns in the table; you simply define a bare-bones wrapper class that extends a Model base class, and all of the getters and setters and knowledge of columns are extrapolated automatically from queries to the database (which are cached). Changes made to an instance of the class are persisted to your database.</p> <p>You can read more about the idea here</p> <p>Provided you follow some conventions, your wrapper class may be as simple as:   <code>php  class Author extends ActiveRecord\\Model {  }</code></p> <p>You are then ready to access rows from your database's authors table and make edits:  ```  $person = Person::find(3); // find author with id of 3  echo $person-&gt;first_name; // \"Bruce\"  echo $person-&gt;age; // 63</p> <p>echo gettype($person-&gt;first_name); // \"string\"  echo gettype($person-&gt;age); // \"integer\"</p> <p>$person-&gt;first_name = \"Caitlyn\";  $person-&gt;save();  echo $person-&gt;first_name; // \"Caitlyn  ```</p> <p>See the other pages in this documentation for details.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>TODO: fill in some more info</p>"}]}